# bot.py
import json
import asyncio
import os
import base64
import logging
from typing import List, Optional, Tuple

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
)
from telegram.ext import Application, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
TOKEN = "8380517379:AAF1pCJKN2uz2YL86yw_wKcFHGy_oFmvOjQ"   # <-- –ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
LONG_DELETE_DELAY = 300      # 5 –º–∏–Ω—É—Ç (—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
SHORT_DELETE_DELAY = 1       # 1 —Å–µ–∫—É–Ω–¥–∞ (—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–∏ –ª–∏—Å—Ç–∞–Ω–∏–∏)
ITEMS_PER_PAGE = 4
PLACEHOLDER = "no_avatar.jpg"
LOG_FILE = "bot.log"

# ====== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ======
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler(LOG_FILE, encoding="utf-8")]
)
log = logging.getLogger(__name__)

# ====== –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ======
# –∫–ª—é—á: (chat_id, thread_id_or_None) -> list of bot message_ids
last_messages: dict[Tuple[int, Optional[int]], List[int]] = {}

# ====== –£—Ç–∏–ª–∏—Ç—ã ======
def ensure_placeholder():
    if os.path.exists(PLACEHOLDER):
        return
    png_b64 = (
        "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGMAAQAABQAB"
        "DQottAAAAABJRU5ErkJggg=="
    )
    try:
        with open(PLACEHOLDER, "wb") as f:
            f.write(base64.b64decode(png_b64))
        log.info("Placeholder created: %s", PLACEHOLDER)
    except Exception as e:
        log.exception("Failed to create placeholder: %s", e)

def load_json(path: str):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        log.warning("Can't load JSON: %s", path)
        return []

def format_member(member: dict, index: int) -> str:
    profile = member.get("profile", "")
    display = member.get("display", "")
    diff = member.get("diff", 0)
    return (f"<b>{index}.</b> <a href='{profile}'>{display}</a>\n"
            f"<b>–ü—Ä–∏—Ä–æ—Å—Ç:</b> {diff:,} ‚ö°").replace(",", " ")

def get_avatar_path(member: dict) -> str:
    avatar = member.get("avatar", "")
    if avatar and os.path.isfile(avatar) and os.path.getsize(avatar) > 0:
        ext = os.path.splitext(avatar)[1].lower()
        if ext in (".jpg", ".jpeg", ".png"):
            return avatar
    return PLACEHOLDER

async def delete_messages(bot, chat_id: int, message_ids: List[int]):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π. –î–ª—è delete_message –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ chat_id + message_id."""
    if not message_ids:
        return
    log.info("Deleting messages in chat=%s : %s", chat_id, message_ids)
    for mid in message_ids:
        try:
            await bot.delete_message(chat_id, mid)
            log.info("Deleted message %s in chat %s", mid, chat_id)
        except Exception as e:
            log.warning("Failed to delete message %s in chat %s: %s", mid, chat_id, e)

async def schedule_delete(bot, chat_id: int, message_ids: List[int], delay: float):
    await asyncio.sleep(delay)
    await delete_messages(bot, chat_id, message_ids)

# ====== ASCII –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–º–æ–∂–µ—à—å —Ä–∞—Å—à–∏—Ä–∏—Ç—å) ======
ascii_art = {
    "–ö–û–¢–ò–ö": """‚£¥‚°ø‚†∂‚†Ä‚†Ä‚†Ä‚£¶‚£Ä‚£¥‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚°Ñ‚†Ä‚†Ä‚£†‚£æ‚†õ‚£ø‚†õ‚£∑‚†Ä‚†ø‚£¶ 
‚†ô‚£∑‚£¶‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Ä‚£¥‚£ø
‚†Ä‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚†ø‚†ã‚†Å
‚†Ä‚£ø‚£ø‚£ø‚†ø‚°ø‚£ø‚£ø‚°ø‚†Ä‚†Ä‚†Ä‚†Ä
‚¢∏‚£ø‚°ã‚†Ä‚†Ä‚†Ä‚¢π‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚°á""",
    "–£–¢–ö–ê": """–£—Ç–∫–∞
‚îà‚îà‚îà‚ï±‚ï±
‚îà‚îà‚ï±‚ï±‚ï±‚ñî
‚îà‚ï±‚ï≠‚îà‚ñî‚ñî‚ï≤
‚ñï‚ñè‚îä‚ï±‚ï≤‚îà‚ï±‚ñè
‚ñï‚ñè‚ñï‚ïÆ‚ñï‚ñï‚ïÆ‚ñè
‚ñï‚ñè‚ñï‚ñã‚ñï‚ñï‚ñã‚ñè
‚ï±‚ñî‚ñî‚ï≤‚ï±‚ñî‚ñî‚ï≤‚ïÆ‚îà‚îà‚ï±‚ñî‚ñî‚ï≤
‚ñè‚ñî‚ñè‚îà‚îà‚ñî‚îà‚îà‚ñî‚ñî‚ñî‚ï±‚ñî‚ñî‚ï±
‚ï≤‚îà‚ï≤‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚ï±‚ñî‚ñî‚ñî
‚îà‚ñî‚ï≤‚ï≤‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ï±
‚îà‚îà‚ñï‚îÅ‚îÅ‚ñè
‚îà‚îà‚ñï‚îÅ‚îÅ‚ñè
‚ï±‚ñî‚ñî‚îà‚îà‚ñî‚ñî‚ï≤""",
    "–ü–ò–ù–ì–í–ò–ù": """Ôºé„ÄÄ„ÄÄÔºø.Ôºø
Ôºé„ÄÄ/######\\
Ôºé (##### @ ######\\
Ôºé /‚Äò„ÄÄ\\######‚Äô„Éº„Éº‰πõ
Ôºé/„ÄÄ„ÄÄ\\####(
- /##„ÄÄ„ÄÄ'‰πõ‚Äô Ôºº
-/####\\„ÄÄ„ÄÄ„ÄÄ„ÄÄ\\
‚Äô/######\\
|#######„ÄÄ„ÄÄ„ÄÄ;
|########„ÄÄ„ÄÄ‰∏ø
|### '####„ÄÄ„ÄÄ/
|###„ÄÄ'###„ÄÄ ;
|### „ÄÄ##/„ÄÄ;
|###„ÄÄ''„ÄÄ„ÄÄ/
####„ÄÄ„ÄÄÔºè 
/###„ÄÄ„ÄÄ‰πÄ
‚Äò#/_______,)),Ôºâ""",
    "–°–û–ë–ê–ö–ê": """‚ï±‚ñî‚ñî‚ï≤‚ñÇ‚ñÇ‚ñÇ‚ï±‚ñî‚ñî‚ï≤
‚ï≤‚ï±‚ï≥‚ï±‚ñî‚ï≤‚ï±‚ñî‚ï≤‚ï±‚ñî
‚îà‚îà‚îÉ‚ñè‚ñï‚ñç‚ñè‚ñï‚ñç‚ñè
‚îà‚îà‚îÉ‚ï≤‚ñÇ‚ï±‚ï≤‚ñÇ‚ï±‚ï≤‚îà‚ï≠‚îÅ‚ïÆ
‚îà‚îà‚îÉ‚îä‚î≥‚îä‚îä‚îä‚îä‚îä‚ñî‚ï∞‚î≥‚ïØ
‚îà‚îà‚îÉ‚îä‚ï∞‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚ïØ
‚îà‚îà‚îÉ‚îä‚îä‚îä‚îä‚ï≠‚ïØ"""
}

# ====== –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ======
async def send_page(origin, guild_key: str, page: int, context: ContextTypes.DEFAULT_TYPE, from_callback: bool):
    """
    origin: Update (–∫–æ–º–∞–Ω–¥–∞) –∏–ª–∏ CallbackQuery (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏)
    from_callback: True –µ—Å–ª–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
    """
    bot = context.bot

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑
    if guild_key == "–ï–í":
        data = load_json("history_ew.json")
    elif guild_key == "–ï–î":
        data = load_json("history_ed.json")
    elif guild_key == "–¢–û–ü10":
        data = load_json("top10.json")
    else:
        data = []

    if not data:
        try:
            if hasattr(origin, "message") and origin.message:
                await origin.message.reply_text("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                await origin.edit_message_text("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        except Exception:
            pass
        return

    # –ü–æ–ª—É—á–∞–µ–º chat –∏ thread (–¥–ª—è —Ç–µ–º —Ñ–æ—Ä—É–º–∞)
    if hasattr(origin, "message") and origin.message:
        chat = origin.message.chat
        chat_id = chat.id
        thread_id = getattr(origin.message, "message_thread_id", None)
    else:
        # –∑–∞–ø–∞—Å
        chat_id = None
        thread_id = None

    key = (chat_id, thread_id)

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ ‚Äî –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π —É–¥–∞–ª–∏—Ç–µ–ª—å —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if from_callback:
        old = last_messages.get(key)
        if old:
            # –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —á–µ—Ä–µ–∑ SHORT_DELETE_DELAY
            asyncio.create_task(schedule_delete(bot, chat_id, old.copy(), SHORT_DELETE_DELAY))
            last_messages[key] = []

    new_ids: List[int] = []

    # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ kwargs –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –Ω—É–∂–Ω—É—é —Ç–µ–º—É (–µ—Å–ª–∏ –µ—Å—Ç—å thread_id)
    thread_kwargs = {"message_thread_id": thread_id} if thread_id is not None else {}

    try:
        if guild_key != "–¢–û–ü10":
            total_pages = max((len(data) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE, 1)
            page = page % total_pages
            start = page * ITEMS_PER_PAGE
            end = start + ITEMS_PER_PAGE
            members = data[start:end]

            # –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ (–∞–≤–∞—Ç–∞—Ä–æ–∫)
            files = []
            try:
                # —Ñ–æ—Ä–º–∏—Ä—É–µ–º media list
                media = []
                for m in members:
                    path = get_avatar_path(m)
                    f = open(path, "rb")
                    files.append(f)
                    media.append(InputMediaPhoto(media=f))
                # send_media_group —Å thread_kwargs
                msgs = await bot.send_media_group(chat_id=chat_id, media=media, **thread_kwargs)
                new_ids.extend([m.message_id for m in msgs])
            finally:
                for f in files:
                    try:
                        f.close()
                    except:
                        pass

            # –ø–æ–¥–ø–∏—Å–∏ –∏ –∫–Ω–æ–ø–∫–∏ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)
            captions = [format_member(m, idx) for idx, m in enumerate(members, start=start + 1)]
            text_block = "\n\n".join(captions)

            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚¨Ö", callback_data=f"{guild_key}|{page-1}"),
                    InlineKeyboardButton("üîÑ", callback_data=f"{guild_key}|refresh|{page}"),
                    InlineKeyboardButton("‚û°", callback_data=f"{guild_key}|{page+1}")
                ]
            ])
            nav_msg = await bot.send_message(chat_id=chat_id, text=text_block, parse_mode="HTML",
                                             reply_markup=keyboard, **thread_kwargs)
            new_ids.append(nav_msg.message_id)

        else:
            # –¢–û–ü10 ‚Äî —Ç–µ–∫—Å—Ç –±–µ–∑ –∞–≤–∞—Ç–∞—Ä–æ–∫
            text = "üèÜ <b>–¢–æ–ø 10 –ø–æ –≤–∫–ª–∞–¥—É</b> üèÜ\n\n"
            for i, member in enumerate(data, start=1):
                text += f"{i}. <a href='{member.get('profile','')}'>{member.get('display','')}</a> ‚Äî {member.get('diff',0):,} ‚ö°\n"
            text = text.replace(",", " ")
            msg_top = await bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML", **thread_kwargs)
            new_ids.append(msg_top.message_id)

    except Exception:
        log.exception("Failed to send page")

    # –µ—Å–ª–∏ –≤—ã–∑–æ–≤ –±—ã–ª —Ç–µ–∫—Å—Ç–æ–º (–Ω–µ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞) ‚Äî —É–¥–∞–ª–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ- –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ LONG_DELETE_DELAY
    try:
        is_callback = hasattr(origin, "data")
        if not is_callback and hasattr(origin, "message") and origin.message:
            user_cmd_mid = origin.message.message_id
            asyncio.create_task(schedule_delete(bot, chat_id, [user_cmd_mid], LONG_DELETE_DELAY))
    except Exception:
        log.exception("Error scheduling deletion of command msg")

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å id –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–∏ –∏—Ö —É–¥–∞–ª–∏—Ç—å)
    last_messages[key] = new_ids.copy()

    # –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–∏—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ LONG_DELETE_DELAY
    try:
        asyncio.create_task(schedule_delete(bot, chat_id, new_ids.copy(), LONG_DELETE_DELAY))
        log.info("Scheduled long delete for new messages %s in chat %s", new_ids, chat_id)
    except Exception:
        log.exception("Failed to schedule long delete for new messages")

# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======
async def handle_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    text = update.message.text.strip().upper()

    if text in ("!–ï–í", "!–ï–î", "!–¢–û–ü10"):
        guild_key = text.replace("!", "")
        log.info("Command %s from chat %s", text, update.message.chat.id)
        await send_page(update, guild_key, 0, context, from_callback=False)
        return
    
    # –ù–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ "–∏–¥–∏ –Ω–∞—Ö—É–π"
    if text == "–ò–î–ò –ù–ê–•–£–ô":
        msg = await update.message.reply_text("–°–∞–º –∏–¥–∏ –Ω–∞—Ö—É–π")
        asyncio.create_task(schedule_delete(context.bot, update.message.chat.id,
                                            [update.message.message_id], LONG_DELETE_DELAY))
        asyncio.create_task(schedule_delete(context.bot, update.message.chat.id,
                                            [msg.message_id], LONG_DELETE_DELAY))
        return

    # –§—Ä–∞–∑–∞ "–ë—É–±–∞" –∏–ª–∏ "Buba"
    if text in ("–ë–£–ë–ê", "BUBA"):
        msg = await update.message.reply_text("–ù–µ –ø—Ä–∏–∑—ã–≤–∞–π —Å–∞—Ç–∞–Ω—É!")
        asyncio.create_task(schedule_delete(context.bot, update.message.chat.id,
                                            [update.message.message_id], LONG_DELETE_DELAY))
        asyncio.create_task(schedule_delete(context.bot, update.message.chat.id,
                                            [msg.message_id], LONG_DELETE_DELAY))
        return
    
    # ASCII –∫–æ–º–∞–Ω–¥—ã ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è reply, –ø–æ—ç—Ç–æ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–æ–π –∂–µ —Ç–µ–º–µ
    if text in ascii_art:
        msg = await update.message.reply_text(ascii_art[text])
        # —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LONG_DELETE_DELAY
        asyncio.create_task(schedule_delete(context.bot, update.message.chat.id, [update.message.message_id], LONG_DELETE_DELAY))
        asyncio.create_task(schedule_delete(context.bot, update.message.chat.id, [msg.message_id], LONG_DELETE_DELAY))
        return
    
async def page_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    await query.answer()
    data = query.data or ""
    if "|" not in data:
        return
    parts = data.split("|")
    guild_key = parts[0]
    if parts[1] == "refresh":
        # parts[2] contains page we were on ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º –∏ –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        page = int(parts[2]) if len(parts) > 2 else 0
        await send_page(query, guild_key, page, context, from_callback=True)
    else:
        page = int(parts[1])
        await send_page(query, guild_key, page, context, from_callback=True)

# ====== –ó–∞–ø—É—Å–∫ ======
def main():
    ensure_placeholder()
    app = Application.builder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_command))
    app.add_handler(CallbackQueryHandler(page_callback))
    log.info("Bot started")
    app.run_polling()

if __name__ == "__main__":
    main()
